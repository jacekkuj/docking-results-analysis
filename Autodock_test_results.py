#!/usr/bin/env python
'''
Usage:
Python script located along with the corresponding *.dlg files within the same folder.
Enter '1' and then '1dock.dlg' as an example.

This software is able to reproduce results form docking protocol given in the corresponding *.dlg file generated by the Chimera software.
'''

import re

# lists
cluster_rank = []
Estimated_Free_Energy_of_Binding = []
Estimated_Inhibition_Constant_Ki = []
Atoms = []
Final_Internal_Energy = []
Torsional_Free_Energy = []
Box = []

# list clear
def clear_the_list(name_list):
    name_list.clear()

# definicja listy
def added_data(name_sentence, name_list):
    for line in filename:
        line = line.rstrip()
        if re.search(name_sentence, line):
            name_list.append(line)

# loop
while True:
    
    #interface
    print("""
    1. Add the file\n
    2. Show results\n""")

    # action
    what_activities = int(input("What would you do?: "))

    if what_activities == 1:

        # file for analysis
        chosen_file = (input("Enter filename (name.extension): "))
#        real_chosen_file = chosen_file
        Box.append(chosen_file)

        # gathering of all lists
        filename = open(real_chosen_file)
        added_data("USER    Cluster Rank", cluster_rank)

        filename = open(real_chosen_file)
        added_data("USER    Estimated Free Energy of Binding",
            Estimated_Free_Energy_of_Binding)

        filename = open(real_chosen_file)
        added_data("USER    Estimated Inhibition Constant, Ki",
            Estimated_Inhibition_Constant_Ki)

        filename = open(real_chosen_file)
        added_data("Final Intermolecular Energy", Final_Internal_Energy)

        filename = open(real_chosen_file)
        added_data("Torsional Free Energy", Torsional_Free_Energy)

        filename = open(real_chosen_file)
        added_data("ATOM", Atoms)


        # box appneding
        lenght_cluster_rank = len(cluster_rank)

        a = 0
        b = -lenght_cluster_rank
        for x in cluster_rank:
            Box.extend([x[8:27], (Estimated_Free_Energy_of_Binding[b])[8:63],
            (Final_Internal_Energy[b])[12:64], (Torsional_Free_Energy[b])[12:64],
            (Estimated_Inhibition_Constant_Ki[b])[8:70]])
            a = a + 1
            b = b + 1
         
        # atoms within the ligand
        filename = open(real_chosen_file)
        for line in filename:
            line = line.rstrip()
            if re.search("Number of atoms in ligand:", line):
                x = line
                number_of_atoms = int((re.findall("[0-9]+", x))[0])

        # pdb coordinates of the first pose
        number_of_first_cluster = int(len(cluster_rank))

        end_number = -((number_of_first_cluster - 1)* number_of_atoms)
        start_number = -(number_of_first_cluster * number_of_atoms)

        Box.append("Coordinates of best ligand: ")

        for x in Atoms [start_number:end_number]:
            Box.append(x)

        # list formatting
        clear_the_list(cluster_rank)
        clear_the_list(Estimated_Free_Energy_of_Binding)
        clear_the_list(Estimated_Inhibition_Constant_Ki)
        clear_the_list(Atoms)
        clear_the_list(Final_Internal_Energy)
        clear_the_list(Torsional_Free_Energy)

        

    elif what_activities == 2:
        break


#data presentation
def writing_results():
	for x in Box:
		if "Cluster" in x:
			print("\n   ", x)
		elif "Coordinates" in x:
			print("\n   ", x)
		elif "C:" in x:
			print("\n\n\n\n                                 ", x)
		else:
			print(x)

if __name__ == '__main__':
	writing_results()

